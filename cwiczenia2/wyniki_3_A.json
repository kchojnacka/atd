MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/nbd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("9012a07d-56e0-48c9-8ee9-69db040922a5") }
MongoDB server version: 4.4.6
{
	"_batch" : [
		{
			"_id" : null,
			"uniqueOccupations" : [
				"Developer I",
				"Financial Analyst",
				"Information Systems Manager",
				"Software Engineer IV",
				"Programmer Analyst III",
				"Account Representative IV",
				"Marketing Assistant",
				"Compensation Analyst",
				"Web Designer III",
				"Business Systems Development Analyst",
				"Speech Pathologist",
				"Safety Technician I",
				"Budget/Accounting Analyst III",
				"Web Developer II",
				"Health Coach I",
				"Web Developer I",
				"Software Test Engineer IV",
				"Recruiter",
				"Administrative Assistant I",
				"Design Engineer",
				"VP Sales",
				"Environmental Tech",
				"Payment Adjustment Coordinator",
				"Marketing Manager",
				"Accounting Assistant I",
				"VP Product Management",
				"Senior Editor",
				"Staff Accountant II",
				"Accounting Assistant III",
				"Developer III",
				"Nurse",
				"VP Marketing",
				"Quality Control Specialist",
				"Structural Analysis Engineer",
				"Chemical Engineer",
				"Pharmacist",
				"Administrative Officer",
				"Computer Systems Analyst II",
				"Electrical Engineer",
				"Web Designer I",
				"Administrative Assistant III",
				"Programmer Analyst II",
				"Health Coach II",
				"Geologist III",
				"Librarian",
				"Office Assistant II",
				"Systems Administrator IV",
				"Recruiting Manager",
				"Help Desk Operator",
				"Paralegal",
				"Research Assistant I",
				"Staff Accountant I",
				"Geologist IV",
				"Biostatistician IV",
				"Structural Engineer",
				"Staff Accountant III",
				"Community Outreach Specialist",
				"Health Coach III",
				"Web Developer IV",
				"Help Desk Technician",
				"Automation Specialist IV",
				"Legal Assistant",
				"Sales Representative",
				"Research Associate",
				"Human Resources Assistant III",
				"Biostatistician III",
				"Programmer Analyst I",
				"Developer IV",
				"Professor",
				"Automation Specialist II",
				"Desktop Support Technician",
				"Research Nurse",
				"Cost Accountant",
				"Analog Circuit Design manager",
				"Biostatistician II",
				"Engineer II",
				"Accountant I",
				"Dental Hygienist",
				"Human Resources Assistant II",
				"Account Representative III",
				"Accounting Assistant IV",
				"Analyst Programmer",
				"Mechanical Systems Engineer",
				"Human Resources Manager",
				"Food Chemist",
				"Junior Executive",
				"Accountant IV",
				"Assistant Manager",
				"Executive Secretary",
				"Director of Sales",
				"Financial Advisor",
				"Systems Administrator II",
				"Clinical Specialist",
				"Computer Systems Analyst III",
				"Programmer I",
				"Software Engineer III",
				"Editor",
				"Safety Technician IV",
				"Accountant III",
				"General Manager",
				"Research Assistant II",
				"Administrative Assistant IV",
				"Chief Design Engineer",
				"Tax Accountant",
				"Internal Auditor",
				"VP Accounting",
				"Media Manager II",
				"Statistician IV",
				"Statistician I",
				"Assistant Media Planner",
				"Computer Systems Analyst IV",
				"Senior Financial Analyst",
				"Safety Technician III",
				"Biostatistician I",
				"Media Manager III",
				"Statistician III",
				"VP Quality Control",
				"Office Assistant I",
				"Systems Administrator I",
				"Occupational Therapist",
				"Sales Associate",
				"Research Assistant III",
				"Web Developer III",
				"Account Representative I",
				"Project Manager",
				"Programmer IV",
				"Web Designer II",
				"Budget/Accounting Analyst I",
				"Media Manager I",
				"Software Test Engineer III",
				"Associate Professor",
				"Software Test Engineer I",
				"Software Test Engineer II",
				"Computer Systems Analyst I",
				"Human Resources Assistant I",
				"Engineer III",
				"Nurse Practicioner",
				"Accounting Assistant II",
				"Registered Nurse",
				"Automation Specialist I",
				"Engineer IV",
				"Assistant Professor",
				"Account Coordinator",
				"Programmer II",
				"Accountant II",
				"Technical Writer",
				"Geologist II",
				"Systems Administrator III",
				"Product Engineer",
				"Database Administrator III",
				"Budget/Accounting Analyst IV",
				"Statistician II",
				"Database Administrator II",
				"Database Administrator I",
				"Human Resources Assistant IV",
				"Graphic Designer",
				"Staff Accountant IV",
				"Programmer III",
				"Senior Cost Accountant",
				"Quality Engineer",
				"Senior Developer",
				"Software Consultant",
				"Java Developer",
				"Environmental Specialist",
				"Data Coordiator",
				"Safety Technician II",
				"Research Assistant IV",
				"Office Assistant III",
				"Senior Quality Engineer",
				"Office Assistant IV",
				"Web Designer IV",
				"Media Manager IV",
				"Operator",
				"Nuclear Power Engineer",
				"Actuary",
				"GIS Technical Architect",
				"Senior Sales Associate",
				"Budget/Accounting Analyst II",
				"Database Administrator IV",
				"Software Engineer II",
				"Geologist I",
				"Software Engineer I",
				"Developer II",
				"Health Coach IV",
				"Engineer I",
				"Physical Therapy Assistant",
				"Account Representative II",
				"Staff Scientist",
				"Programmer Analyst IV",
				"Teacher",
				"Geological Engineer",
				"Civil Engineer",
				"Automation Specialist III",
				"Administrative Assistant II",
				"Social Worker",
				"Account Executive"
			]
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
