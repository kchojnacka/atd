MongoDB shell version v4.4.6
connecting to: mongodb://127.0.0.1:27017/nbd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("c7f394ea-a67d-4e5b-ae72-8278200b9d58") }
MongoDB server version: 4.4.6
{
	"_batch" : [
		{
			"_id" : "Ecuador",
			"min" : 19.837789435759387,
			"max" : 31.540757595400457,
			"avg" : 25.66255028757021
		},
		{
			"_id" : "Saudi Arabia",
			"min" : 19.971991294865283,
			"max" : 32.095388696280175,
			"avg" : 25.676484975670657
		},
		{
			"_id" : "Burkina Faso",
			"min" : 19.874924416260065,
			"max" : 39.84736448162324,
			"avg" : 27.581473331497783
		},
		{
			"_id" : "Republic of the Congo",
			"min" : 17.66140782350201,
			"max" : 30.40321009942462,
			"avg" : 25.559867696319753
		},
		{
			"_id" : "Western Sahara",
			"min" : 22.75109226188259,
			"max" : 22.75109226188259,
			"avg" : 22.75109226188259
		},
		{
			"_id" : "French Polynesia",
			"min" : 20.299688460981415,
			"max" : 28.539227949185673,
			"avg" : 25.351408860541465
		},
		{
			"_id" : "Cameroon",
			"min" : 19.681646953380184,
			"max" : 33.171539196923106,
			"avg" : 24.6366953354223
		},
		{
			"_id" : "Malaysia",
			"min" : 18.54461856797744,
			"max" : 36.53428355033911,
			"avg" : 25.61238899059476
		},
		{
			"_id" : "Vietnam",
			"min" : 16.588074623788906,
			"max" : 32.97072894443237,
			"avg" : 25.04102236093672
		},
		{
			"_id" : "South Korea",
			"min" : 19.481858628477152,
			"max" : 31.35384445026281,
			"avg" : 24.68188694874893
		},
		{
			"_id" : "Lebanon",
			"min" : 22.696782965005376,
			"max" : 32.444431072334524,
			"avg" : 27.50900155800487
		},
		{
			"_id" : "Turkey",
			"min" : 22.712340024306464,
			"max" : 23.218818230827427,
			"avg" : 22.991591061963124
		},
		{
			"_id" : "Colombia",
			"min" : 18.549317336103282,
			"max" : 35.4010351305359,
			"avg" : 25.779858026548695
		},
		{
			"_id" : "United Arab Emirates",
			"min" : 23.390978608691807,
			"max" : 29.753071854779463,
			"avg" : 26.572025231735637
		},
		{
			"_id" : "Brazil",
			"min" : 17.455901881799917,
			"max" : 40.629137270681994,
			"avg" : 25.618104713178706
		},
		{
			"_id" : "Gambia",
			"min" : 17.84046677774891,
			"max" : 29.041518380755527,
			"avg" : 23.773405222453228
		},
		{
			"_id" : "Yemen",
			"min" : 20.910656892847584,
			"max" : 34.85489627858924,
			"avg" : 25.520741902141804
		},
		{
			"_id" : "Ukraine",
			"min" : 17.021559565054986,
			"max" : 36.84222756372365,
			"avg" : 25.206155364019796
		},
		{
			"_id" : "Tuvalu",
			"min" : 22.60418435695907,
			"max" : 22.60418435695907,
			"avg" : 22.60418435695907
		},
		{
			"_id" : "Zambia",
			"min" : 20.338719513529025,
			"max" : 31.44864603504859,
			"avg" : 25.857875377943596
		},
		{
			"_id" : "Samoa",
			"min" : 20.54488200453268,
			"max" : 20.54488200453268,
			"avg" : 20.54488200453268
		},
		{
			"_id" : "Guadeloupe",
			"min" : 22.066287052482927,
			"max" : 22.066287052482927,
			"avg" : 22.066287052482927
		},
		{
			"_id" : "Norway",
			"min" : 19.602504292612466,
			"max" : 35.1671816861818,
			"avg" : 27.012053304746868
		},
		{
			"_id" : "Chile",
			"min" : 16.9512916270108,
			"max" : 29.79885840825515,
			"avg" : 24.869680560672286
		},
		{
			"_id" : "Kosovo",
			"min" : 19.254012570630334,
			"max" : 29.624326587170813,
			"avg" : 24.13095183240382
		},
		{
			"_id" : "Suriname",
			"min" : 30.38931494743512,
			"max" : 30.38931494743512,
			"avg" : 30.38931494743512
		},
		{
			"_id" : "Sint Maarten",
			"min" : 22.218504166585912,
			"max" : 24.103065474104024,
			"avg" : 23.16078482034497
		},
		{
			"_id" : "Ghana",
			"min" : 22.309636417250765,
			"max" : 32.50433727787583,
			"avg" : 25.844519996457066
		},
		{
			"_id" : "Bolivia",
			"min" : 20.461244736382792,
			"max" : 32.04862302606189,
			"avg" : 25.291606754307583
		},
		{
			"_id" : "Malawi",
			"min" : 23.29026327914253,
			"max" : 30.498934041274012,
			"avg" : 27.299142700133018
		},
		{
			"_id" : "United Kingdom",
			"min" : 19.427928671881645,
			"max" : 31.903158982438534,
			"avg" : 23.785736038981
		},
		{
			"_id" : "Madagascar",
			"min" : 17.556666479697988,
			"max" : 30.189583737327382,
			"avg" : 24.78315354739493
		},
		{
			"_id" : "Angola",
			"min" : 18.362400744093293,
			"max" : 31.67480491405164,
			"avg" : 24.17967562103932
		},
		{
			"_id" : "Trinidad and Tobago",
			"min" : 22.714055076873127,
			"max" : 31.519844903401175,
			"avg" : 27.598645704582985
		},
		{
			"_id" : "Comoros",
			"min" : 19.73678859401531,
			"max" : 33.86465840113391,
			"avg" : 25.43904303433795
		},
		{
			"_id" : "Cambodia",
			"min" : 21.873859826171213,
			"max" : 33.32850035102713,
			"avg" : 27.383971278390955
		},
		{
			"_id" : "Luxembourg",
			"min" : 19.267057864459574,
			"max" : 33.21935122648016,
			"avg" : 26.311128380021454
		},
		{
			"_id" : "Latvia",
			"min" : 18.435535988693054,
			"max" : 32.88731053562053,
			"avg" : 26.634771177397017
		},
		{
			"_id" : "Andorra",
			"min" : 25.692486527991623,
			"max" : 30.65208078150739,
			"avg" : 28.172283654749506
		},
		{
			"_id" : "Saint Kitts and Nevis",
			"min" : 25.181373219019413,
			"max" : 30.06261206327215,
			"avg" : 27.801128935139957
		},
		{
			"_id" : "East Timor",
			"min" : 21.52514539442196,
			"max" : 32.7295665335962,
			"avg" : 25.827978752662307
		},
		{
			"_id" : "Czech Republic",
			"min" : 18.56386639676774,
			"max" : 33.15190133598319,
			"avg" : 25.234554286525263
		},
		{
			"_id" : "Paraguay",
			"min" : 21.194188847738655,
			"max" : 32.97774797284501,
			"avg" : 25.118908017345476
		},
		{
			"_id" : "Wallis and Futuna",
			"min" : 24.33390757821489,
			"max" : 28.43117093855067,
			"avg" : 26.38253925838278
		},
		{
			"_id" : "Ethiopia",
			"min" : 20.55367285745029,
			"max" : 32.85411863239378,
			"avg" : 25.47396595279003
		},
		{
			"_id" : "Niger",
			"min" : 20.07204296186382,
			"max" : 30.22683231486928,
			"avg" : 26.384679570852143
		},
		{
			"_id" : "Zimbabwe",
			"min" : 22.609825375832813,
			"max" : 35.12027773402992,
			"avg" : 26.97591880240733
		},
		{
			"_id" : "Bosnia and Herzegovina",
			"min" : 16.930664311421886,
			"max" : 35.97395007994128,
			"avg" : 25.418629730315736
		},
		{
			"_id" : "Qatar",
			"min" : 21.90167438399709,
			"max" : 29.599291029472685,
			"avg" : 25.750482706734886
		},
		{
			"_id" : "Afghanistan",
			"min" : 18.4302993485763,
			"max" : 31.680724277814612,
			"avg" : 25.04840088025495
		},
		{
			"_id" : "Togo",
			"min" : 21.483089176370907,
			"max" : 24.559999693631624,
			"avg" : 23.268539811569163
		},
		{
			"_id" : "Costa Rica",
			"min" : 20.494010942211922,
			"max" : 28.898569613792333,
			"avg" : 24.650437337200202
		},
		{
			"_id" : "Australia",
			"min" : 20.65310909810227,
			"max" : 29.824555993432554,
			"avg" : 25.195047158310075
		},
		{
			"_id" : "Macedonia",
			"min" : 20.495052187246902,
			"max" : 32.52569417786054,
			"avg" : 25.169543167338254
		},
		{
			"_id" : "Sierra Leone",
			"min" : 19.49887642053163,
			"max" : 33.448269454681686,
			"avg" : 25.11304222749876
		},
		{
			"_id" : "Finland",
			"min" : 18.313044445355132,
			"max" : 36.88879211052598,
			"avg" : 25.62844713976524
		},
		{
			"_id" : "Nepal",
			"min" : 19.748973244733463,
			"max" : 31.078489717648623,
			"avg" : 26.43434938647296
		},
		{
			"_id" : "Barbados",
			"min" : 21.343242644513325,
			"max" : 21.343242644513325,
			"avg" : 21.343242644513325
		},
		{
			"_id" : "Jordan",
			"min" : 21.210207189566123,
			"max" : 32.353159768034715,
			"avg" : 26.643190252349186
		},
		{
			"_id" : "Micronesia",
			"min" : 20.483583148077006,
			"max" : 25.24886656617766,
			"avg" : 23.307344877130703
		},
		{
			"_id" : "American Samoa",
			"min" : 22.398336918076584,
			"max" : 22.398336918076584,
			"avg" : 22.398336918076584
		},
		{
			"_id" : "Democratic Republic of the Congo",
			"min" : 18.27553140160477,
			"max" : 33.515401571866754,
			"avg" : 26.530271205495303
		},
		{
			"_id" : "Maldives",
			"min" : 23.654619429922963,
			"max" : 28.25830239759801,
			"avg" : 25.389870790829356
		},
		{
			"_id" : "Nauru",
			"min" : 22.91236113053845,
			"max" : 22.91236113053845,
			"avg" : 22.91236113053845
		},
		{
			"_id" : "Kiribati",
			"min" : 23.104683336146245,
			"max" : 23.104683336146245,
			"avg" : 23.104683336146245
		},
		{
			"_id" : "Kenya",
			"min" : 21.963094173998595,
			"max" : 32.415973001368904,
			"avg" : 25.84497767923738
		},
		{
			"_id" : "North Korea",
			"min" : 20.924212172010197,
			"max" : 30.614290364070985,
			"avg" : 26.205146023322587
		},
		{
			"_id" : "Greenland",
			"min" : 25.87231726224435,
			"max" : 25.87231726224435,
			"avg" : 25.87231726224435
		},
		{
			"_id" : "Moldova",
			"min" : 19.688381123290277,
			"max" : 32.56715420989366,
			"avg" : 25.57295819429361
		},
		{
			"_id" : "Georgia",
			"min" : 19.907789367690288,
			"max" : 27.6963070482808,
			"avg" : 24.320295824417713
		},
		{
			"_id" : "Netherlands",
			"min" : 19.37514915181097,
			"max" : 34.91379070141339,
			"avg" : 26.02467655953886
		},
		{
			"_id" : "Chad",
			"min" : 19.379712122869797,
			"max" : 32.14867661954464,
			"avg" : 25.90576302097001
		},
		{
			"_id" : "Somalia",
			"min" : 29.953705951906365,
			"max" : 29.953705951906365,
			"avg" : 29.953705951906365
		},
		{
			"_id" : "Monaco",
			"min" : 28.9279758282314,
			"max" : 28.9279758282314,
			"avg" : 28.9279758282314
		},
		{
			"_id" : "Seychelles",
			"min" : 25.710551755136727,
			"max" : 25.710551755136727,
			"avg" : 25.710551755136727
		},
		{
			"_id" : "Montenegro",
			"min" : 20.73659089443422,
			"max" : 29.526909667433987,
			"avg" : 24.00617071684226
		},
		{
			"_id" : "Aland Islands",
			"min" : 22.422508995430604,
			"max" : 33.92911214898956,
			"avg" : 28.16261648965891
		},
		{
			"_id" : "Liberia",
			"min" : 22.64819265750957,
			"max" : 29.63330910128883,
			"avg" : 25.901546538832037
		},
		{
			"_id" : "Switzerland",
			"min" : 20.192102704387423,
			"max" : 31.153535521833074,
			"avg" : 25.70946937867775
		},
		{
			"_id" : "South Africa",
			"min" : 17.33504330126283,
			"max" : 40.54150514193364,
			"avg" : 25.864994700042747
		},
		{
			"_id" : "Marshall Islands",
			"min" : 22.403515045781823,
			"max" : 26.899880561973735,
			"avg" : 24.4362224388107
		},
		{
			"_id" : "Saint Lucia",
			"min" : 20.263359356035604,
			"max" : 27.57036153167093,
			"avg" : 23.007900513203566
		},
		{
			"_id" : "Cape Verde",
			"min" : 19.20724222151505,
			"max" : 35.04527266278727,
			"avg" : 25.33466174988547
		},
		{
			"_id" : "Puerto Rico",
			"min" : 22.624807178343218,
			"max" : 27.28341528253193,
			"avg" : 25.262349688052414
		},
		{
			"_id" : "Austria",
			"min" : 23.01532709975852,
			"max" : 37.259975846114166,
			"avg" : 27.93883177972952
		},
		{
			"_id" : "Gabon",
			"min" : 22.266802561601597,
			"max" : 29.04827089492947,
			"avg" : 25.657536728265534
		},
		{
			"_id" : "Canada",
			"min" : 18.337991820012604,
			"max" : 33.61303753837222,
			"avg" : 25.522904474899473
		},
		{
			"_id" : "Mauritius",
			"min" : 19.225308641975307,
			"max" : 38.86342108446306,
			"avg" : 25.493607821171015
		},
		{
			"_id" : "Senegal",
			"min" : 21.10083404913989,
			"max" : 26.591448446940536,
			"avg" : 23.415570863855162
		},
		{
			"_id" : "Iraq",
			"min" : 17.811382149213077,
			"max" : 33.23798843565602,
			"avg" : 24.097732336776872
		},
		{
			"_id" : "Peru",
			"min" : 17.806002361986923,
			"max" : 36.36334544992972,
			"avg" : 25.27264557662211
		},
		{
			"_id" : "Italy",
			"min" : 18.626656995429222,
			"max" : 31.28284127929142,
			"avg" : 25.224448562759804
		},
		{
			"_id" : "Syria",
			"min" : 18.668899303500158,
			"max" : 36.4017489356862,
			"avg" : 25.379241567006584
		},
		{
			"_id" : "Dominica",
			"min" : 26.42147612552151,
			"max" : 26.42147612552151,
			"avg" : 26.42147612552151
		},
		{
			"_id" : "Croatia",
			"min" : 18.791459338166646,
			"max" : 38.54454850434303,
			"avg" : 24.859825049169952
		},
		{
			"_id" : "Guinea",
			"min" : 20.460478773371793,
			"max" : 34.462128538412365,
			"avg" : 27.9142215967982
		},
		{
			"_id" : "Guatemala",
			"min" : 19.619608992088942,
			"max" : 32.13075314700059,
			"avg" : 25.742899593543548
		},
		{
			"_id" : "Bulgaria",
			"min" : 18.415763633181026,
			"max" : 32.5985033633058,
			"avg" : 24.584068264017684
		},
		{
			"_id" : "Albania",
			"min" : 18.995343497963386,
			"max" : 31.98582559382973,
			"avg" : 24.708938287604877
		},
		{
			"_id" : "Morocco",
			"min" : 20.182304322324796,
			"max" : 32.90604019213787,
			"avg" : 25.87499924181595
		},
		{
			"_id" : "Indonesia",
			"min" : 14.752916025545577,
			"max" : 45.22548881143321,
			"avg" : 25.496762666989078
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong("4516331497677872593"),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
